using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using CsvHelper;
using Dapper;
using System.IO;
using System.Linq;

namespace AbstractInsertExample
{
    // Postエンティティクラス
    public class Post
    {
        public string Title { get; set; } = string.Empty;   // 投稿のタイトル
        public string Content { get; set; } = string.Empty; // 投稿の内容
    }

    // 抽象クラス：共通のDB操作を定義
    public abstract class AbstractDatabaseHandler<T>
    {
        protected abstract string TableName { get; }
        protected abstract string InsertQuery { get; }
        protected abstract string ConnectionString { get; }

        // 複数レコードの挿入
        public void InsertEntities(IEnumerable<T> entities)
        {
            foreach (var entity in entities)
            {
                int newId = InsertEntity(entity); // 単一レコードを挿入し、ID取得
                Console.WriteLine($"テーブル {TableName} に挿入されました。生成されたID: {newId}");
            }
        }

        // 単一レコードの挿入とID取得
        private int InsertEntity(T entity)
        {
            var parameters = CreateParameters(entity); // パラメータ作成
            return ExecuteInsert(InsertQuery, parameters); // 挿入とID取得
        }

        // データベースにクエリを実行し、生成されたIDを取得
        private int ExecuteInsert(string query, object parameters)
        {
            using (IDbConnection db = new SqlConnection(ConnectionString))
            {
                db.Open();
                using var transaction = db.BeginTransaction();
                try
                {
                    var id = db.ExecuteScalar<int>(query, parameters, transaction: transaction);
                    transaction.Commit(); // コミット
                    return id; // 生成されたIDを返す
                }
                catch
                {
                    transaction.Rollback(); // エラー時にロールバック
                    throw;
                }
            }
        }

        // エンティティのプロパティをパラメータに変換
        private object CreateParameters(T entity)
        {
            var parameters = new Dictionary<string, object>();
            foreach (var property in typeof(T).GetProperties())
            {
                parameters.Add(property.Name, property.GetValue(entity));
            }
            return parameters;
        }
    }

    // Postテーブル用のDBハンドラークラス
    public class PostDatabaseHandler : AbstractDatabaseHandler<Post>
    {
        protected override string TableName => "Posts"; // テーブル名

        protected override string InsertQuery =>
            "INSERT INTO Posts (Title, Content) VALUES (@Title, @Content); SELECT SCOPE_IDENTITY();";

        protected override string ConnectionString =>
            "Data Source=Server;Initial Catalog=YourDatabase;User ID=your_user;Password=your_password;";

        // 外部データからレコードを取得するメソッド
        public IEnumerable<Post> GetRecords(string filePath)
        {
            using var reader = new StreamReader(filePath);
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);

            // CSVファイルの内容をPostオブジェクトのリストに変換
            return csv.GetRecords<Post>().ToList();
        }
    }

    // メインプログラム
    public class Program
    {
        public static void Main(string[] args)
        {
            try
            {
                // Postテーブル用のハンドラーを作成
                var postHandler = new PostDatabaseHandler();

                // 外部CSVファイルから投稿データを取得
                string filePath = "/path/to/your/posts.csv"; // CSVファイルのパス
                var posts = postHandler.GetRecords(filePath); // レコードを取得

                // 取得したデータをデータベースに挿入
                postHandler.InsertEntities(posts);

                Console.WriteLine("全てのデータが正常に挿入されました。");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"エラーが発生しました: {ex.Message}");
            }

            Console.WriteLine("プログラム終了。");
        }
    }
}