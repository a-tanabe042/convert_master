using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Dapper;

namespace DapperExample
{
    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }

    public class Program
    {
        // カラムのマッピング辞書（事前に定義）
        private static readonly Dictionary<string, string> ColumnMapping = new Dictionary<string, string>
        {
            { "Id", "UserId" },
            { "Name", "FullName" },
            { "Email", "EmailAddress" }
        };

        static string connectionString = "Data Source=Server;Initial Catalog=YourDatabase;User ID=your_user;Password=your_password;";

        public static void Main(string[] args)
        {
            try
            {
                // データベースからユーザー一覧を取得
                List<User> users = GetUsersFromDatabase();

                // 各ユーザーを型変換し、別のDBに挿入
                foreach (var user in users)
                {
                    var convertedUser = ConvertUser(user);
                    InsertUserWithMapping(connectionString, convertedUser);
                }

                Console.WriteLine("全てのユーザーが新しいデータベースに挿入されました。");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"エラーが発生しました: {ex.Message}");
            }

            Console.WriteLine("プログラム終了。");
        }

        // データベースからユーザー情報を取得し、Listに格納
        public static List<User> GetUsersFromDatabase()
        {
            using (IDbConnection db = new SqlConnection(connectionString))
            {
                string query = "SELECT Id, Name, Email FROM Users;";
                var users = db.Query<User>(query).AsList(); // クエリ結果をListに変換
                return users;
            }
        }

        // 型変換メソッド（現時点では何もしない）
        public static User ConvertUser(User user)
        {
            // 将来的な型変換処理をここに記述
            return user;
        }

        // ユーザー情報をDBに挿入するメソッド
        public static void InsertUserWithMapping(string connectionString, User user)
        {
            using (IDbConnection db = new SqlConnection(connectionString))
            {
                string query = $"INSERT INTO Users ({ColumnMapping["Id"]}, {ColumnMapping["Name"]}, {ColumnMapping["Email"]}) " +
                               "VALUES (@UserId, @FullName, @EmailAddress);";

                var parameters = new
                {
                    UserId = user.Id,
                    FullName = user.Name,
                    EmailAddress = user.Email
                };

                try
                {
                    db.Execute(query, parameters);
                    Console.WriteLine($"ユーザー「{user.Name}」の挿入に成功しました。");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"ユーザー「{user.Name}」の挿入に失敗しました: {ex.Message}");
                }
            }
        }
    }
}

using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using ClosedXML.Excel;

namespace Convert
{

    // Entity class
    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            try
            {
                string excelFilePath = "/Users/akifumitanabe/Desktop/excel/users.xlsx";
                string sheetName = "Users"; // 読み込むタブの名前
                string cellRange = "A2:C10"; // 読み込むセルの範囲

                // データの取得 と　型チェック
                List<User> users = ParseExcelFile(excelFilePath, sheetName, cellRange);
                // データの取得
                string bulkInsertQuery = GenerateBulkInsertQuery(users);

                Console.WriteLine("Generated Bulk INSERT Query:");
                Console.WriteLine(bulkInsertQuery);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }

            Console.WriteLine("\nPress Enter to exit...");
            Console.ReadLine();
        }

        public static List<User> ParseExcelFile(string filePath, string sheetName, string cellRange)
        {
            var users = new List<User>();

            // WLWorkbookを使ってExcelファイルを開く
            using (var workbook = new XLWorkbook(filePath))
            {
                // シートを取得
                var worksheet = workbook.Worksheet(sheetName);
                // 指定したセル範囲の行を取得
                var rows = worksheet.Range(cellRange).RowsUsed();

                foreach (var row in rows)
                {
                    // セルの値を取得してUserオブジェクトに変換
                    var user = new User
                    {
                        Id = int.Parse(row.Cell(1).GetString(), CultureInfo.InvariantCulture),
                        Name = row.Cell(2).GetString(),
                        Email = row.Cell(3).GetString()
                    };
                    users.Add(user);
                }
            }

            return users;
        }

        public static string GenerateBulkInsertQuery(List<User> users)
        {
            if (users.Count == 0) return string.Empty;

            string query = "INSERT INTO Users (Id, Name, Email) VALUES\n";
            string values = string.Join(",\n", users.Select(user =>
                $"({user.Id}, '{user.Name}', '{user.Email}')"));

            return query + values + ";";
        }
    }
}